using NUnit.Framework;
using SROMLab1;

namespace SmthTest
{
    [TestFixture]
    public class UnitTest1
    {
        //----------Add----------
        [TestCase("0", "5C353D8D758E06E4DFFB37B5", "5C353D8D758E06E4DFFB37B5")]
        [TestCase("5C353D8D758E06E4DFFB37B5", "1", "5C353D8D758E06E4DFFB37B6")]
        [TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD", 
            "58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95", 
            "8DCFE9110B263EB26A6FFD951E92A431545E3A026D6C9D21D11792087CD4468FEE06BBE1D1E54F2BBE1CF7A2643ECFE5EE604240778AFFE5B49A1C46B4712562")]
        [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
            "5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71", 
            "111D3A6B79BE5ED618C07D64CBDB48F56CD6E4CA022092CC1542CD23B19449B52AC0786E62A614F5E5F870DA39A9AD293D3770C9F1D7D3B54D2807A7BF2CF2CB2")]
        [TestCase("2", "2", "4")]
        [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
        "8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
        "13F81407BF29A37A23E1F1A2DC310BDFA1996E7A4136E01E25060AA51DF5AAA50619C7E66EA21A7680A2DB2B0F2BD0A90225E5B2226692D93E71895000DCFB509")]
        [TestCase("62D85A0F903DD94865435F59E9785DCF8593C0DB4E73D3A7FBB3EC99B6CD4C3528A93806608DD6F2F1396068E75EEF79D25FA18F36D39F44AAFB26454367B2E2",
        "2820EE434847B161C014E717E54207FFCD348088E58A83BF460679142250F9DD3ACAC62FFC55C6446F9F4782F3F144B8CA072CB149F1876A55A9D117A84F0980",
        "8AF94852D8858AAA25584671CEBA65CF52C8416433FE576741BA65ADD91E46126373FE365CE39D3760D8A7EBDB5034329C66CE4080C526AF00A4F75CEBB6BC62")]
        [TestCase("671291C18CC4CEEA9F0878A9ED848F9A471AEFAF99C597B1062E7F5BE278E27444F0B6CD3951821905547367EB45B8C9",
        "666A82C256DEBA9CA73BE9DFA4736678E37E8B7635C1A6BCF3A67ED7378C79F942A04CA8D8E3AD4D91C1B134641F6B65",
        "CD7D1483E3A389874644628991F7F6132A997B25CF873E6DF9D4FE331A055C6D8791037612352F669716249C4F65242E")]

        public void AdditionTest(string hex1, string hex2, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var actualResult = Calculate.ReConv(Calculate.LongAddInternal(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

     //----------Sub----------
    [Test]
    [TestCase("88","88","0")]
    [TestCase("5C353D8D758E06E4DFFB37B5",
                "0",
                "5C353D8D758E06E4DFFB37B5"
          )]
    [TestCase("5C353D8D758E06E4DFFB37B5",
                "1",
                "5C353D8D758E06E4DFFB37B4"
          )]
    [TestCase("5C353D8D758E0DFFB37B5",
                "116",
                "5C353D8D758E0DFFB369F"
          )]
    [TestCase("D3366CC6702AF6A433519293E30DF05E8749A06638669ADC394D5C0532982799ECF790FC050FAC724CB729BF2198BEE20315CAE8DFA6A8DFA3FE1895472DF65",
            "4E3DA68D1B84C0125496D73CFEEC7EB9828A1F0C9F80378DBE3C9B7DE0E1C3587DAD14A75BA1721F590BEA63A7085DA61487797576895763EF0CF155BAE52C3",
            "84F8C63954A63691DEBABB56E42171A504BF815998E6634E7B10C08751B664416F4A7C54A96E3A52F3AB3F5B7A90613BEE8E5173691D517BB4F1273F8C48CA2")]
    [TestCase("6E90A982977373DDC113D00578416811A541A7BF255C20CCDFFE10A0ED44E852874FBC1CE89D2051F6E976AFDBE808D9", "28E5296DBFDA46B352F0B55A94A893E5BAB7C3FFF244A189676E4A3A85F0385809EE736AD27FD4E09BA605EEEB16CA2C", "45AB8014D7992D2A6E231AAAE398D42BEA89E3BF33177F43788FC6666754AFFA7D6148B2161D4B715B4370C0F0D13EAD")]
    [TestCase("FF92413583A4CAA23ECF4BB33025B1A58DE1217F358D0F40BE07D91AA298BB5E57B47199DA3D3EFA48487917D861CFA53CE5C0F2C46DEACAF0AC9E31C6578899", "8CFDEAF151E82924FB80AA4B861142CE6C524B34E61CC2ADED9AC5FBD650AFFAB2FBE98C1FB758D0A2C90E26DA6D7DA8623B3C49F7D4F16207A1B5D6B7875E25", "7294564431BCA17D434EA167AA146ED7218ED64A4F704C92D06D131ECC480B63A4B8880DBA85E629A57F6AF0FDF451FCDAAA84A8CC98F968E90AE85B0ED02A74")]
    public void LongSubTest(string hex1, string hex2, string expectedResult)
    {
        var a = Calculate.Converting(hex1);
        var b = Calculate.Converting(hex2);
        var actualResult = Calculate.ReConv(Calculate.LongSub(a, b));
        Assert.AreEqual(expectedResult, actualResult);
    }
        
     //----------Mul----------
    [Test]
    [TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
                 "58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
                 "126E1F84C05F2F0478BC1BB97EA870E2357DFF1FA3ED0F8D9E4F2C4B1CF933D3F64BD22D9761FD598EF8F381AB2A84294359B2EE43D70170CF9182EBB961D56D19970429DEF02494C95B341ACC75EFF227A0D4BDD9149483D9D7143D56B3C25D8B55B81433AD812F60A7F4234854EB569EC021432DA486C3963DED2F227B4351"
           )]
    [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
                 "5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
                 "41EB89367562EC483164D0C6D5CADBDFA26C21CA40EEC1901C0ACAA8D2DD4B7AAA098AF873217DC3E34AE4A3D838DD3896AFD43B8C8336D47B41F082EB60FC1AAD6BA433EA3528F54ECF544CB7252EFA3CC6E1398D56723BC109BC9D23F079ABC7EB03DCCC266BDB80A08EEAC6D6B9AFBFC8E0899297CA9A9312FCECE5B7E8B1"
           )]
    [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
                 "8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
                 "62B21845EC85CCE30B870AE3825560BD43B7084466385E0E87D5BF6D92CA8BC8F5B7AED2293324C1AD4EC918A83FFA40051F788850BBAC2C4A9E0DE0E81A8F88B11FEA1BFFCB325B2959CFE1463F864598D6DB36F4517F8F8BD552CA2E64FF342D7B127B196A6B0019F0CE9DE0B9A691640A5B9D48609EF0EA25AE3AE6517AD4"
           )]
    [TestCase("5C353D8D758E06E4DFFB37B5",
                 "1",
                 "5C353D8D758E06E4DFFB37B5"
           )]
        [TestCase("2", "2", "4")]
        [TestCase("4", "4", "10")]
        [TestCase("1", "1", "1")]
        [TestCase("10", "4", "40")]
        [TestCase("4B", "2907058A0A9", "C050E9F71183")]
        [TestCase("A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "668F52D9F89E7C315B165F4A8FF1E2935238C7678A87939F5277513F121323F28EF99B183239D24AC441CFCDED27EEB743747803A8A321EA5F71DDCE0A673E24")]
        public void MulTest(string hex1, string hex2, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var actualResult = Calculate.ReConv(Calculate.MulUlong(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //----------Div----------

        [Test]
        [TestCase("ABABABABAABABABABABABAABABABABABABAABAB",
                  "ABABABABAABABABABABABAABABABABABABAABAB",
                  "1"
            )]
        [TestCase("ABABABABAABABABABABABAABABABABABABAABAB",
                  "1",
                  "ABABABABAABABABABABABAABABABABABABAABAB"
            )]
        [TestCase("3AC9EC8A7D3A554C1E9094A1854ACB0E2B7CBDDE59C2ADA018173C98BF4DFB1BD8D5DCCFD5BDFA9E91C8839958684D7121B4DA8863925E77EA0A27A28867B6CE",
                   "A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
                   "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E29"
            )]
        [TestCase("101A3F04E4BB34DD41FE0893D0FCF341776CFF41016BB753DBF23B5D6FEBF156B5CE6C511D5E54876559CF6A0BC3CDB93CE883331CE1349F604D789C440E1FBA",
                   "62CFC9B03F18DEB0667A9F46DEA1D1D10AB9720ED7379F544B8C5DC67211EF89",
                   "29B7DCAFF9696345732544724E3C71710551355E18CB3405AF5917CFF3B0F890"

            )]
        
       
        public void DivTest(string hex1, string hex2, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var actualResult = Calculate.ReConv(Calculate.LongDiv(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //----------Pow----------
        [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFF", "0", "1")]
        [TestCase("2", "0", "1")]
        [TestCase("2", "1", "2")]
        [TestCase("2", "3", "8")]
        [TestCase("2", "4", "10")]
        [TestCase("2", "5", "20")]
        [TestCase("2", "A", "400")]
        [TestCase("16D4CA8", "81", "47F077521DEA7B5C4CD4386F372D61793C148D2E707929FECFA88A253039BA4DF2E1BBB2EA092CA971416B99387373D3461E217E4717421BB4B1EBF9E7F03E49C4D3C772AF7F9D0C9DAE6C780EC639586992B190A3B985366BCF1DCAF6D80D1A49F1BF8BECCC26FE60F2F442BE1EF46F86580AAECB4DABE31244739193EFABF51DA3C4BDD66DA64602C2C54679F65CC6D7E61F6F14F91A74C929304163C9A50399477675E4CD92A76026EEECD7447B2B9664D0C2FEB79C1F46CAFA4A0CF8115706A028CB59F8B3A13821549D46F7B825FA3CB4A44AC3966EEF6395827F6F424DCFAF0D729CECFBDEE7EC4AA5F6EC4ECC011B788586B4CEDD179493AB425241A1573CF34B3FFD0B4DCDCA9C5366FA8C362DD876FF09900E49E172435F01B31B84209845B868AA3E495B0BEADA8415E1D7C788FC9FBB87561FCBEDB2BC7E47F086FDBF9840369FB384B24B66B90BE27968928A56ABD71C1FEF5863CA8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase("4B", "21", "2EE23EFAD9F31E4D2F24BFABDF6BEFA129ABDCF8C0116B93E4CB")]
        public void LongPowertTest(string hex1, string hex2, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var actualResult = Calculate.ReConv(Calculate.LongPower(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        //-------------GCD----------
        [Test]
        [TestCase("AAAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAA")]
        [TestCase("F", "A", "5")]
        [TestCase("31", "29", "1")]
        [TestCase("1DF9E9A", "4", "2")]

        public void GCDTest(string hex1, string hex2, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);

            var actualResult = Calculate.ReConv(Calculate.BinaryGCD(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        //------------Comp--------------
        [TestCase("1131A0939A911173", "1800000000000000", -1)]
        [TestCase("AAAFFFFAAABBBB121231997BBBBA", "7BBBBA", 1)]
        [TestCase("1", "0", 1)]
        [TestCase("7BBBBA", "AAAFFFFAAABBBB121231997BBBBA", -1)]
        [TestCase("FFFFF000000", "FFFFF000000", 0)]
        [TestCase("00000000000000000000000000000000", "0000000000000001", -1)]
        [TestCase("0000000000000001", "00000000000000000000000000000000", 1)]
        [TestCase("ABABABABAABABABABABABAABABABABABABAABAB", "1",   1 )]
        [TestCase("000000","00000000", 0)]


        public void CMPTest(string hex1, string hex2, int expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);

            var actualResult = (Calculate.LongCmp(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //-------------MOD--------------

        [TestCase("D", "F", "D")]
        [TestCase("F", "B", "4")]
        [TestCase("400","A3","2E")]
        [TestCase("87AF11BCD", "B11", "14E")]
        [TestCase("A55C", "B13", "A52")]
        [TestCase("3AC9EC8A7D3A554C1E9094A1854ACB0E2B7CBDDE59C2ADA018173C98BF4DFB1BD8D5DCCFD5BDFA9E91C8839958684D7121B4DA8863925E77EA0A27A28867B6CE",
                 "A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
                 "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E28")]
        [TestCase("458ABD6D","789ABC","49E379")]
       // [TestCase("2EE23EFAD9F31E4D2F24BFABDF6BEFA129ABDCF8C0116B93E4CB", "1A5",)]

        public void MODTest(string hex1, string hex2, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);

            var actualResult = Calculate.ReConv(Calculate.BarrettReduction(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        //-----------POWModTest------------
        [Test]
        [TestCase("2E151CB", "10C2", "23413", "227E2")]
       // [TestCase("AB9399181470F", "1", "9328F", "18D9C")]
        [TestCase("82", "6C", "133", "111")]
        [TestCase("2","A","A3","2E")]
        [TestCase("AB9399181470F", "FFAF", "9328F", "460D8")]
        /*[TestCase("392CFEAD46445A57720138D83B31F0CC62F116E2564A8562DADDB193D666673",
            "9D374367DB9C449D1D0DEE78F52654D92A89CC382359FCEF37F6A17E4D8251E2",
            "18D95542377F163795BB3CC5065F56A9E9386F4F580F076A745B01E1A51D6A9F",
            "FF3450FA38E3C740874AD17AD5C612AF83C00F07C1BBFAE75E0BD816FE0CC03")] */
        [TestCase("C7373F42010FFDCE90F63AD45BE9B198AFA6181EB7717E9B6439A8AFFABD401580BBAEB8768A405F61D41D59606ADE77431CDC9F8CEF6343B9C606ADE998514B", "2457F26A63B3DA4458F040BC8D295F2E28BB7635A922902550F4CFC503734CB7DB5E06A3BC188F6551BCB9EF4B25FC92A4154B7B1BA7DE6BB1CFC1281E3C1CFC", "8E0CC64B031952C48CA328D6DF353CC02F9AA18AEB7338349843674E91D7BDB65CBC6209831257E4552CB90FC3EF6703678FED54E1C1897565B97EF494174078", "F3A031AC05778526003EA408921E2DFE2661D7F603C15313B5771474470F7186990C6C1500E99D938E5A600D0C2FFDB64E4E0D283437DC397C75BBFA9298849")]
        [TestCase("E51C9687DB7BEDE1A7F0718B8329D08C7FC31225880A7D8C23BDA5FB731B863CA311B73559F1A649CBD9D9C84A77B57BF1BA8FC6D98160D15B632EA4D42FC4725FBD232A03BA38E14096FF447BC0C55809AB8FDD5904EB86DAF168EA169A703307A7480D5CB773DEA53C4F85F30DE46A21C56BC960003A4AD976BBFE40DF4564", "BE4290BA83AB483CD0C470A709C13794CE1BC45D5050A4E4298C50BF89963C1A65635F82151D041C9051444BD23164B677DF63D1C8A6801C598DFE901AA64E78851B208432D214076C3F03FA4E21A2A96BAAD535F1D3A62B409F249E6424571199738330ACA335E826390B9DEB80BF113771081EFDB282F57060E776C197ECE8", "40F43E45D506C892C36A80D1F1AF9D2427179711B7C12C1B5BAAF8453C2CC710CBF9144D2A6B8CE297529C8CB56C5353FDA7E4C03B3BEC4DBBD96AD75F00011BE784C7F2B99F18539700D7189D4089ED88AE5BC02799F74DA331CC430C22E4F2A638812B3CCC1422AD137B81D90E9040949D12D7BEE4EFB17BA5AAEFC739EA2A", "1F561A664D81762BD16A088219A4DD6C10C9181160B789AC10544B3366714FFAE9404A0D15A4152A54E2AB78F181C33FEC25F68004B888953B4AC2F78D23E971E7C43710CD89E1E6D0BD3AF57AB55887964B3968B6854E83B7FDE7A9B85DCBC8E2D1A83C0F2D1AEC8D0273D989C287C0B0A45279CCF4F5F62EDA4A15CB8C17F4")]
        public void POWModTest(string hex1, string hex2, string hex3, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var c = Calculate.Converting(hex3);

            var actualResult = Calculate.ReConv(Calculate.LongModPowerBarrett(a, b, c));
            Assert.AreEqual(expectedResult, actualResult);
        }
        
      /*  //---------------LONGMODADD-----------
        [Test]
        [TestCase("A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
         "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E28",
          "18ABBD9A48D", "10F4DC367F2")]
        [TestCase("AAA234924090000BAAAAA", "488F9D580BBA73B6A2D52", "58684D7121B4DA88", "4111121EF0CA7F04")]
        [TestCase("7E32A592DB7B01976753", "D09C825BDD032B51B06A15", "3018", "1F50")]
        [TestCase("6173D2B13EE2DF824882836972ED2468BCF27D61DC8FEEAF28B4EA5CCCF1F914", "79A2246969B9ED3AC1050EB5585CD7AB7091044F5F6338741FE738F9C86B239", "3FA7FD884286C54EC392175", "3DB569EA88FA74B66F6CC6A")]
        [TestCase("C8839958684D7121B4DA8863925E77EA0A27A28867B6CE", "4D0FFA257CCEA11EBAB1F01E65A77392D01F1", "48C1B463F2782F60D0", "160CE11B1B5DB077DF")]
        public void AddModTest(string hex1, string hex2, string hex3, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var c = Calculate.Converting(hex3);

            var actualResult = Calculate.ReConv(Calculate.LongModAdd(a, b, c));
            Assert.AreEqual(expectedResult, actualResult);
        }
        //---------------LONGMODSUB-----------
        [Test]
        [TestCase("A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
                  "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E28",
                  "18ABBD9A48D", "10F4DC367F2")]
        [TestCase("AAA234924090000BAAAAA", "488F9D580BBA73B6A2D52", "58684D7121B4DA88", "4111121EF0CA7F04")]
        [TestCase("7E32A592DB7B01976753", "D09C825BDD032B51B06A15", "3018", "1F50")]
        [TestCase("6173D2B13EE2DF824882836972ED2468BCF27D61DC8FEEAF28B4EA5CCCF1F914", "79A2246969B9ED3AC1050EB5585CD7AB7091044F5F6338741FE738F9C86B239", "3FA7FD884286C54EC392175", "3DB569EA88FA74B66F6CC6A")]
        [TestCase("C8839958684D7121B4DA8863925E77EA0A27A28867B6CE", "4D0FFA257CCEA11EBAB1F01E65A77392D01F1", "48C1B463F2782F60D0", "160CE11B1B5DB077DF")]
        public void SubModTest(string hex1, string hex2, string hex3, string expectedResult)
        {
            var a = Calculate.Converting(hex1);
            var b = Calculate.Converting(hex2);
            var c = Calculate.Converting(hex3);

            var actualResult = Calculate.ReConv(Calculate.LongModSub(a, b, c));
            Assert.AreEqual(expectedResult, actualResult);
        }
        */
    }
}

